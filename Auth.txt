or managing authentication state in your app, you can use React Context API or any state management library like Redux. Hereâ€™s a basic example using React Context:

// auth-context.js
import React, { createContext, useState, useEffect } from "react";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [authToken, setAuthToken] = useState(localStorage.getItem("authToken"));

  const login = (token) => {
    setAuthToken(token);
    localStorage.setItem("authToken", token); // Save token in localStorage
  };

  const logout = () => {
    setAuthToken(null);
    localStorage.removeItem("authToken"); // Remove token from localStorage
  };

  useEffect(() => {
    if (!authToken) {
      localStorage.removeItem("authToken");
    }
  }, [authToken]);

  return (
    <AuthContext.Provider value={{ authToken, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};


///////////////////////////////////////////


import React, { useState, useContext } from "react";
import axios from "axios";
import { AuthContext } from "./auth-context";

const Login = () => {
  const { login } = useContext(AuthContext);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://localhost:3001/login", { username, password });
      login(response.data.token); // Store token on successful login
    } catch (err) {
      setError("Invalid credentials");
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="Username"
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
        />
        <button type="submit">Login</button>
      </form>
      {error && <p>{error}</p>}
    </div>
  );
};

export default Login;


/////////////////////////////////////////////////////////

Protected Route (to check if the user is authenticated)


import React, { useContext, useEffect, useState } from "react";
import axios from "axios";
import { AuthContext } from "./auth-context";

const ProtectedRoute = () => {
  const { authToken } = useContext(AuthContext);
  const [message, setMessage] = useState("");

  useEffect(() => {
    if (authToken) {
      axios
        .get("http://localhost:3001/protected", {
          headers: { Authorization: authToken },
        })
        .then((response) => setMessage(response.data))
        .catch((error) => setMessage("Access Denied"));
    } else {
      setMessage("Please log in.");
    }
  }, [authToken]);

  return <div>{message}</div>;
};

export default ProtectedRoute;
/////////////////////////////////////////////////////


You can now use React Router to handle different routes (e.g., login, protected route, etc.):


import React from "react";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom";
import { AuthProvider } from "./auth-context";
import Login from "./Login";
import ProtectedRoute from "./ProtectedRoute";

const App = () => {
  return (
    <AuthProvider>
      <Router>
        <Switch>
          <Route path="/login" component={Login} />
          <Route path="/protected" component={ProtectedRoute} />
        </Switch>
      </Router>
    </AuthProvider>
  );
};

export default App;


